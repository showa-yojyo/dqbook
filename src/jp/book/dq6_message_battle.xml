<?xml version="1.0" encoding="UTF-8"?>

<section id="dq6.message.battle"><?dbhtml filename="dq6_message_battle.html" ?>
<title>戦闘メッセージ解析</title>
<indexterm><primary>メッセージ</primary><secondary>DQ6</secondary></indexterm>

<section id="dq6.message.battle.hack">
<title>解析手順</title>
<para>
	既に先人 <xref linkend="dqref.url1"/> の手によってデータ格納位置が判明している。
	ROM イメージさえあれば、ドラクエビューワで完全なリストを閲覧することができる。
	ここでは、
	「どのようにすれば戦闘メッセージのデータ格納アドレスをサーチできるか」
	を述べる。
</para>
<para>
	勝手に以下のことを仮定し、それを信じてエミュレータ (GSD を推奨) で Diff サーチを行う。
</para>
<itemizedlist>
	<listitem>
		<para>
			メッセージ ID 自体のサイズは <literal>2</literal> バイト
		</para>
	</listitem>
</itemizedlist>
<para>
	「○○○○が あらわれた！」
	「○○○○の こうげき！」
	「○○○○に ○○の ダメージ！」
	「○○○○を たおした！」
	等、表示メッセージが変化するたびに執拗に Diff サーチをすることにより、
	それらしい値変化をしているアドレスを細かく見ていく：
</para>
<itemizedlist>
	<listitem>
		<para>
			<varname>$7E3056</varname>
		</para>
	</listitem>
	<listitem>
		<para>
			<varname>$7E5966</varname>
		</para>
	</listitem>
	<listitem>
		<para>
			<varname>$7E5998</varname>
		</para>
	</listitem>
	<listitem>
		<para>
			<varname>$7E59A8</varname>
		</para>
	</listitem>
	<listitem>
		<para>
			<varname>$7E59B8</varname>
		</para>
	</listitem>
	<listitem>
		<para>
			<varname>$7E59BA</varname>
		</para>
	</listitem>
	<listitem>
		<para>
			<varname>$7E59BC</varname>
		</para>
	</listitem>
</itemizedlist>
<para>
	戦闘突入直後に、これらのアドレスひとつひとつに Break Point を置き、
	メッセージの表示と関係があるかどうかをみる。ここからは運任せである。
</para>
<para>
	<varname>$7E3056</varname> は頻繁に Read されるので、メッセージの更新とは無関係とみなし、これを候補から除外する。
	次に <varname>$7E5966</varname> だが、これも同様な感じがするのでやはり除外する。
	その次の <varname>$7E5998</varname> でそれらしい挙動を見せるようになる。
	GSD のアウトプットウィンドウの表示はこうなる：
</para>
<programlisting>
$C0/2A36 8D 98 59    STA $5998  [$7E:5998]   A:000B X:0042 Y:0000 D:1E1F DB:7E S:083E （行末まで省略）
$C0/27B8 AD 98 59    LDA $5998  [$7E:5998]   A:0001 X:0004 Y:0000 D:1E1F DB:7E S:0837 （行末まで省略）
$C0/27C1 AD 98 59    LDA $5998  [$7E:5998]   A:0003 X:0004 Y:0000 D:1E1F DB:7E S:0837 （行末まで省略）
</programlisting>
<para>
	ここで、あらかじめ用意しておいた逆アセンブリコードリストと照合する。
	バンクごとに逆アセンブリコードを用意しておくのが解析人の鉄則だ。
	<varname>$C0/27B8</varname>, <varname>$C0/27C1</varname> の命令を一つのルーチンが含んでいる。
	これが戦闘メッセージのデータを取得するものであると狙いがつけられる。
</para>
<programlisting>
C0/27B0:    08          PHP 
C0/27B1:    C230        REP #$30
C0/27B3:    F47E7E      PEA $7E7E
C0/27B6:    AB          PLB 
C0/27B7:    AB          PLB 
C0/27B8:    AD9859      LDA $5998
C0/27BB:    290700      AND #$0007
C0/27BE:    8D1E5A      STA $5A1E
C0/27C1:    AD9859      LDA $5998
C0/27C4:    4A          LSR A
C0/27C5:    4A          LSR A
C0/27C6:    4A          LSR A
C0/27C7:    48          PHA 
C0/27C8:    0A          ASL A
C0/27C9:    6301        ADC $01,S
C0/27CB:    AA          TAX 
C0/27CC:    68          PLA 
                                            // x == 戦闘メッセージ ID
C0/27CD:    BFD15AC1    LDA $C15AD1,X       // 戦闘メッセージ 開始アドレス郡
C0/27D1:    18          CLC 
C0/27D2:    69BDDE      ADC #$DEBD
C0/27D5:    85A0        STA $A0             $A0 = アドレス + DEBDh;
C0/27D7:    BFD35AC1    LDA $C15AD3,X       // 戦闘メッセージ 開始アドレス郡+
C0/27DB:    29FF00      AND #$00FF
C0/27DE:    69F600      ADC #$00F6
C0/27E1:    85A2        STA $A2             $A2 = (バンク &amp; 0x00FF) + 00F6h;
C0/27E3:    64A4        STZ $A4             $A4 = 0000h;
                                            for(;;){
C0/27E5:    AD1E5A      LDA $5A1E
C0/27E8:    F013        BEQ $27FD               if($5A1E)  return;
                                                do{
C0/27EA:    22FF27C0    JSR $C027FF                 ■1. $A0 にストアされているアドレス値を incr.
                                                    ■2. a = 文字コードをセット
C0/27EE:    C9AC00      CMP #$00AC
C0/27F1:    F005        BEQ $27F8                   if(a == 00ACh) break;
C0/27F3:    C9AE00      CMP #$00AE
C0/27F6:    D0F2        BNE $27EA               }while(a != 00AEh);
C0/27F8:    CE1E5A      DEC $5A1E               --$5A1E;
C0/27FB:    80E8        BRA $27E5           }
C0/27FD:    28          PLP 
C0/27FE:    6B          RTL
</programlisting>
<para>
	このルーチンの <literal>LDA</literal> 命令をチェックしておくと、
	<varname>$C15AD3</varname> がいかにも戦闘メッセージデータのアドレスの先頭であることが特定できる。
	ソニタウン <xref linkend="dqref.url2"/> の結果と一致して、まずは一安心である。
	あとは、このアドレスから <literal>1</literal> バイトずつドラクエ6 の小フォント文字コードとみなして、
	力にまかせてデコードしていけばよい。
	dq_analyzer <xref linkend="dqref.url1"/> のデコーダにある配列を流用すればよい。
	最初から <command>dq6decoder -s</command> する場合、戦闘メッセージは出力ファイルの
	<literal>655599</literal> 行目の <literal>39</literal> 半角文字目に現れる。
</para>
</section> <!-- dq6.message.battle.hack -->

<section id="dq6.message.battle.data">
<title>データ</title>
<para>
	ドラクエビューワ <xref linkend="dqref.url2"/> を見ればよい。
	と書くハズだったが、戦闘ルーチンのコード解析においてテキストベースでのリストがないと、
	まるで話にならないことに気付いた。
	ここにテキストベースの戦闘メッセージリストを公開する。
	dq_analyzer <xref linkend="dqref.url1"/>
	のデコーダが出力するものと基本的に同等のものである。
	ただし「印字不可能文字」は文字コードの直接出力に修正した。
</para>
<para>
	<xref linkend="appendix.b" />
</para>
</section> <!-- dq6.message.battle.data -->
</section> <!-- dq6.message.battle -->
