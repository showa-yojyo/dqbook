<?xml version="1.0" encoding="UTF-8"?>

<section id="dq5.flow.encounter"><?dbhtml filename="dq5_flow_encounter.html" ?>
<title>エンカウント制御</title>
<indexterm id="term.dq5.flow.encounter.1"><primary>エンカウント</primary><secondary>DQ5</secondary></indexterm>
<indexterm id="term.dq5.flow.encounter.2"><primary>エンカウント</primary></indexterm>
<indexterm id="term.dq5.flow.encounter.3"><primary>一歩移動</primary></indexterm>
<para> 
	移動モードから戦闘モードに移行するときのプログラムの制御について述べる。
	この項は、計算機の知識なしには読解できないような記述を含むかもしれない。
</para>
<para>
	また、「エンカウント」「一歩移動」「乱数」などの
	ドラクエ用語、符丁や計算機用語を定義を与えずに用いる。
</para>

<section id="dq5.flow.encounter.overview">
<title>概要</title>
<para> 
	フィールドやダンジョンなどを一歩移動するごとに、トヘロスやせいすいなどを
	使用していなければ、プログラムは次の評価をする：
</para>
<orderedlist>
	<listitem>
		<para>
			移動しているフィールド地域、ダンジョンレベル等から<emphasis>タイルエンカウント ID</emphasis> 
			[<link linkend="dq5.data.encounter">dq5.data.encounter</link>]を決定する。
		</para>
	</listitem>
	<listitem>
		<para>
			ID に対応するエンカウント確率を計算し、乱数的要素によりエンカウントするかどうかを決定する。
		</para>
	</listitem>
</orderedlist>
<para>
	移動地域とタイルエンカウントID の対応表は、偉大なる先人によって解析済である。
	dq_analyzer - スーパーファミコン版ドラゴンクエスト データ解析プログラム
	（Shingo Endo 氏解析資料 <xref linkend="dqref.url1"/>）
	から入手できるテキストファイル (dq5monmap.txt) に克明に記述されている。
</para>
<para>
	エンカウント率を決定する要因は、以下のものが確認されている。
	これによって、乱数がエンカウントデータと歩行状況から決まる値より小さければ、エンカウントを免れる。
	そうでなければ「とりあえず」エンカウント決定となる。
</para>
<itemizedlist>
	<listitem>
		<para>
			タイルエンカウントデータから間接的に取得できる定数である
			<emphasis>エンカウント決定係数</emphasis>
		</para>
	</listitem>
	<listitem>
		<para>
			前回戦闘終了後からの歩数、現在位置の地形……といった<emphasis>歩行状況</emphasis>
		</para>
	</listitem>
	<listitem>
		<para>
			0 以上 255 以下をとる<emphasis>乱数</emphasis>
		</para>
	</listitem>
</itemizedlist>
<para> 
	そしてすぐに、次のような感じで戦闘モード初期状態の設定処理を行う。
	最後の処理で、データとしてはあり得ないが、和 $0F がゼロであれば、
	エンカウントの処理はキャンセルされる。
</para>
<orderedlist>
	<listitem>
		<para>
			<emphasis>謎のパラメータ</emphasis>をセットする。
			「しょきじょうたい」(&copy; &dq7_2000; デバッグモード) の決定に関与か？
		</para>
	</listitem>
	<listitem>
		<para>
			タイルエンカウントデータから、<emphasis>レベル</emphasis>を取得し、
			然るべきアドレスに値をセットしておく。
		</para>
	</listitem>
	<listitem>
		<para>
			戦闘終了後に仲間チェックをするかどうかを決定する。
		</para>
	</listitem>
	<listitem>
		<para>
			グループの<emphasis>モンスター ID</emphasis> および構成匹数を無効な値で初期化。
		</para>
	</listitem>
	<listitem>
		<para>
			<emphasis>モンスターID 決定用データ 0～A</emphasis>
			をそれぞれ $00, $01,..,$0A にセット、その和を $0F にセットする。
		</para>
	</listitem>
</orderedlist>
</section> <!-- dq5.flow.encounter.overview -->

<section id="dq5.flow.encounter.group">
<title>グループ</title>
<para> 
	前項の処理で、エンカウントがキャンセルされなかったときの続きの処理を述べる。
</para>
<orderedlist>
	<listitem>
		<para>
			乱数 R（0 以上 $0F 以下）を取得しておく。
		</para>
	</listitem>
	<listitem>
		<para>
			前項でセットした $00 から $0A までの i-部分和 
			S(i) = $00 + ... + $0i
			を計算していく。
			i = 0, 1, .., A とインクリメントしていく。
			ただしセットされている項がゼロである場合は、その項を部分和に勘定しない。
		</para>
	</listitem>
	<listitem>
		<para>
			こうして、S(i) &gt; R となるような 決定用データ 0～A のインデックス i を見つける。
		</para>
	</listitem>
</orderedlist>
<para>
	例えば、
	$00 != 0, $01 != 0, $00 + $01 &lt;= R かつ $00 + $01 + $02 &gt; R であれば、
	i = 2 がセットされるということである。
	ゼロの項は、タイルエンカウントデータの対応する値がダミーであることを意味する。
	詳しく述べると、タイルエンカウント ID = 0 において「がいこつへい」、
	その他の ID においては、モンスター ID = 0 の「スライム」である。
	この i によって、出現するグループの傾向が決定するのである：
</para>
<itemizedlist>
	<listitem>
		<para>
			i = 10 → <ulink url="#dq5.flow.encounter.group.special">特別エンカウントの場合</ulink>
		</para>
	</listitem>
	<listitem>
		<para>
			i &gt;= 5 → <link linkend="dq5.flow.encounter.group.single">出現グループ数が単独の場合</link>
		</para>
	</listitem>
	<listitem>
		<para>
			それ以外 → <link linkend="dq5.flow.encounter.group.multi">出現グループ数が複数の場合</link>
		</para>
	</listitem>
</itemizedlist>
<para>
	以上の処理を終了した後に、エンカウント処理を終了することになる。
	つまり、移動モードが続行となるか、戦闘モードに突入するかが決定される。
</para>
</section> <!-- dq5.flow.encounter.group -->

<section id="dq5.flow.encounter.group.special">
<title>特別エンカウントの場合</title>
<para> 
	特別エンカウントが適用されることが決定した場合、以降の処理は一本道である。
</para>
<orderedlist>
	<listitem>
		<para>
			タイルエンカウントデータにある、<emphasis>謎のフラグ</emphasis>をチェックする
			しかし、この値はデータ ID によらずゼロなので、説明は省略する。
		</para>
	</listitem>
	<listitem>
		<para>
			タイルエンカウントデータより、<emphasis><link linkend="dq5.data.encounter.special">特別エンカウントデータ ID</link></emphasis>
			を取得する。
			そのデータからモンスターグループの構成が特別エンカウントID により一意に決まる。
			また、各グループの匹数を<link linkend="dq5.flow.encounter.group.single">非特別エンカウントの場合に準じた形</link>で決定する。
		</para>
	</listitem>
</orderedlist>
</section> <!-- dq5.flow.encounter.group.special -->

<section id="dq5.flow.encounter.group.single">
<title>出現グループ数が単独の場合</title>
<para> 
	i &gt;= 5 のときは、出現グループ数が 1 で確定する。
	あとはモンスターと匹数を決定するだけである。
	ただし、下記の数式によって得られた匹数は、
	実際に登場するそれよりもかなり大きいことがある。
	エンカウント設定よりだいぶ後の処理で、匹数を減らすのである。
</para>
<orderedlist>
	<listitem>
		<para>
			グループを構成する匹数は、M(j) + 乱数（0 以上 E(j) 未満）とする。
			ここで、M, E はそれぞれアドレス $23EA63, $23EA73 に存在する配列であり、
			j は i に等しい。
		</para>
	</listitem>
	<listitem>
		<para>
			グループを構成するモンスターのモンスターID を決定する。その値は
			タイルエンカウントデータ内の<emphasis>モンスターID i</emphasis> である。
		</para>
	</listitem>
</orderedlist>
<para>
	<emphasis>最小匹数決定列 M </emphasis> - 
	ROM アドレス $23EA63 (ロムイメージオフセット $11EA63) にある 
	1byte 値、サイズ 16 の配列である：
</para>
<programlisting>
M[16] = {1, 2, 3, 1, 2, 3, 4, 8, 1, 1, 1, 1, 1, 1, 1, 1};
</programlisting>
<para>
	<emphasis>プラスアルファ匹数決定列 E </emphasis> - 
	ROM アドレス $23EA73 (ロムイメージオフセット $11EA73) にある 
	1byte 値、サイズ 16 の配列である：
</para>
<programlisting>
E[16] = {1, 1, 1, 2, 2, 2, 4, 1, 1, 2, 3, 4, 5, 6, 7, 8};
</programlisting>
</section> <!-- dq5.flow.encounter.group.single -->

<section id="dq5.flow.encounter.group.multi">
<title>出現グループ数が複数の場合</title>
<para> 
	i &lt; 5 のときは、出現グループ数は 2 以上である。
	この i は、エンカウントデータの<emphasis>モンスターID i</emphasis> が、
	第1グループのモンスターID として決定されることを意味する。
</para>
<para> 
	続いて、数 0, 1, 2 の中からランダムに数を選択する。すなわち (グループ数 - 2) である。
	なお、ランダムの重みにエンカウントデータの「グループ数決定用データ」を用いる。
	具体的なアルゴリズムは以下のようになっている：
</para>
<orderedlist>
	<listitem>
		<para>
			エンカウントデータの<emphasis>グループ数決定用データ 0..2</emphasis>を使い、
			以下のような数列を $00, $01, ... にセットする。
			ここで、0, 1, 2 はそれぞれグループ数決定用データ k
			(k = 0, 1, 2) にある値と同じだけ連続して並べるものとする。
			例を挙げよう。エンカウント ID = 11 において、
			データ 0、データ 1、データ 2 の値はそれぞれ 3, 2, 1 であるから、
			セットする数列は {0, 0, 0, 1, 1, 2} である。
		</para>
<programlisting>
{0,..,0,1,..,1,2,..,2};
</programlisting>
	</listitem>
	<listitem>
		<para>
			さらに、グループ数決定用データ 3 項の和、すなわちセットした配列のサイズを計算しておく。
			エンカウント ID = 11 の例では、3 + 2 + 1 = 6 である。
		</para>
	</listitem>
	<listitem>
		<para>
			データ的にあり得ないが、この 3 項の和がゼロであれば、エンカウントはキャンセルされる。
		</para>
	</listitem>
	<listitem>
		<para>
			乱数 j を取得する。この乱数は 0 以上かつ 3 項の和を超えない。
		</para>
	</listitem>
	<listitem>
		<para>
			グループ数 = $0j の値 + 2 となる。$0C に $0j の値を記憶させておく。
		</para>
	</listitem>
</orderedlist>
<para> 
	各グループのモンスター ID を、
	<link linkend="dq5.flow.encounter.group.single">出現グループ数が単数の場合</link>と同様のアルゴリズムで決定する。
	すなわち $06,..,$09 に記憶させておき、すぐに然るべきアドレスにセットする。
</para>
<para> 
	各グループの匹数を、
	<link linkend="dq5.flow.encounter.group.single">出現グループ数が単数の場合</link>と同様のアルゴリズムで決定する。
	ただし、相当する数式は M(i + 7) + 乱数（0 以上 E(i + 7) 未満）となる。
	また、グループが単数の場合と同様に、
	上記の数式によって得られた匹数が必要以上に大きいときは、
	後の処理で、各グループの匹数を減らす。
</para>
</section> <!-- dq5.flow.encounter.group.multi -->
</section> <!-- dq5.flow.encounter -->

