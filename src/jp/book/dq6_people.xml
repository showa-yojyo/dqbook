<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % replacement SYSTEM "replacement.xml">
  %replacement;
]>

<section id="dq6.people"><?dbhtml filename="dq6_people.html" ?>
<title>人オブジェクト解析</title>
<indexterm id="term.dq6.people"><primary>人オブジェクト</primary><secondary>DQ6</secondary></indexterm>

<para>
	この文書では、人オブジェクトデータの概念、構造および抽出方法について述べる。
</para>
<para>
	<link linkend="dq6.debug.floor.0286">デバッグフロアにいるある女性</link>に話しかけると、
	フリーズしてしまう件を調査していたら、
	「はなす」の処理の流れが部分的に見えてきた。
	すなわち、フロアの切替時に「人オブジェクト」とも言うべきデータ、
	その初期化ルーチンで、データを ROM 領域から引っ張ってくる処理である。
</para>

<section id="dq6.people.hack">
<title>解析</title>

<section id="dq6.people.hack.trace">
<title>トレース</title>
<para>
	まず最初に GSD ではなく、Peer's Snes9x Tracer を用いてトレースを採取する
	（未確認だが、GSD はトレースの大部分をカットしているような気がするため）。
	Num / キーが Trace On/Off のスイッチとなる。
	最強女に「はなす」直前からトレースを開始する。
	そして、フリーズしたと思ったら即トレース終了。
	SMC ファイルのあるフォルダか、
	エミュレータのあるフォルダに log ファイルが生成されているので、
	それをエディタで開き、ある地点から遡行するようにコードを眺めていく……。
</para>
<para>
	記者は以前の解析により、
	この<link linkend="dq6.text.travel.data">人物のセリフのメッセージ ID</link> を知っている。
	この値 <literal>#$1817</literal> を検索する。そこがコード遡行の開始地点となる。
</para>
<programlisting>
$C0/3047 E2 20       SEP #$20                 A:00CD  X:0002  Y:000E  ...
$C0/3049 A3 0D       LDA $0D,s    [$00:0859]  A:00CD  X:0002  Y:000E  ...
$C0/304B 48          PHA                      A:00CD  X:0002  Y:000E  ...
$C0/304C AB          PLB                      A:00CD  X:0002  Y:000E  ...
$C0/304D C2 20       REP #$20                 A:00CD  X:0002  Y:000E  ...
$C0/304F A0 01 00    LDY #$0001               A:00CD  X:0002  Y:000E  ...
$C0/3052 B3 0B       LDA ($0B,s),y[$CD:FB27]  A:00CD  X:0002  Y:0001  ...
$C0/3054 8F 98 59 7E STA $7E5998  [$7E:5998]  <emphasis>A:1817</emphasis>  X:0002  Y:0001  ...
$C0/3058 A3 0B       LDA $0B,s    [$00:0857]  <emphasis>A:1817</emphasis>  X:0002  Y:0001  ...
$C0/305A 1A          INC A                    A:FB26  X:0002  Y:0001  ...
$C0/305B 1A          INC A                    A:FB27  X:0002  Y:0001  ...
$C0/305C 83 0B       STA $0B,s    [$00:0857]  A:FB28  X:0002  Y:0001  ...
$C0/305E F4 7E 7E    PEA $7E7E    [$CD:7E7E]  A:FB28  X:0002  Y:0001  ...
$C0/3061 AB          PLB                      A:FB28  X:0002  Y:0001  ...
$C0/3062 AB          PLB                      A:FB28  X:0002  Y:0001  ...
$C0/3063 60          RTS                      A:FB28  X:0002  Y:0001  ...
</programlisting>
<para>
	<varname>$CDFB27</varname> からメッセージ ID を得ていることがわかった。
	<varname>$7E5998</varname> はメッセージ ID を格納するアドレスだったことを思い出す。
	これを踏まえてトレースを遡行すると、これらのラインのすぐ近くに、
	明らかに重要な意味を持つルーチンを発見することができた。
</para>
<programlisting>
$C0/CAC3 C2 30     REP #$30               A:00CD  X:0002  Y:000E  ...
$C0/CAC5 F4 7E 7E  PEA $7E7E  [$7E:7E7E]  A:00CD  X:0002  Y:000E  ...
$C0/CAC8 AB        PLB                    A:00CD  X:0002  Y:000E  ...
$C0/CAC9 AB        PLB                    A:00CD  X:0002  Y:000E  ...
<emphasis>$C0/CACA DC B0 06  JML [$06B0][$CD:FB26]</emphasis>  A:00CD  X:0002  Y:000E  ...

$CD/FB26 00 17     BRK #$17               A:00CD  X:0002  Y:000E  ...
*** BRK
</programlisting>
<para>
	<varname>$C0CACA</varname> の <literal>JML</literal> 命令において、
	<varname>$0006B0</varname> に格納されている値 <literal>#$CDFB26</literal> をサブルーチンのアドレスとして
	ジャンプしている。
	そのサブルーチン <varname>$CDFB26</varname> でいきなり <literal>BRK</literal> しているが、
	オペランド <literal>#$17</literal> のあるアドレスの次のアドレスにある値 <literal>#$18</literal> と合わせれば、
	この <literal>BRK</literal> 命令がメッセージ表示処理そのものであることが推測できる。
</para>
<para>
	ということは次にすることは、<varname>$0006B0</varname> に値がセットされるところを探すことだ。
	トレースをもう少し遡ると、以下のようなロード命令を発見することができる。
	これは最強女の場合であるが、<literal>LDA $8017,y</literal> 命令で
	<varname>$7E8025</varname> に <literal>#$FB26</literal> がロードされ、
	<varname>$7E8057</varname> に <literal>#$00CD</literal> がロードされていることがわかる。
	それでは、<varname>$7E8025</varname> に値が<emphasis>いつセットされるのかを</emphasis>
	GSD を使って確認することにしよう。
</para>
<programlisting>
$C0/CA4C  B9 17 80     LDA $8017,y[$7E:8025]  A:168F  X:0002  Y:000E ...
$C0/CA4F  8F B0 06 00  STA $0006B0[$00:06B0]  A:FB26  X:0002  Y:000E ...
$C0/CA53  B9 57 80     LDA $8057,y[$7E:8065]  A:FB26  X:0002  Y:000E ...
$C0/CA56  8F B2 06 00  STA $0006B2[$00:06B2]  A:00CD  X:0002  Y:000E ...
</programlisting>
</section> <!-- dq6.people.hack.trace -->

<section id="dq6.people.hack.brkpnt">
<title><varname>$7E8025</varname> Write</title>
<para>
	最強女のいるフロアから一旦抜け、Breakpoints ダイアログで
	<varname>$7E8025</varname> を Write だけチェックを入れる。
	そして再び最強女のフロアに入ると、以下のラインでプログラムが一時停止する。
</para>
<programlisting>
$C0/B6BD 99 17 80    STA $8017,y[$7E:8025]   A:CC62 X:06BE Y:000E ...
$C0/B909 9D 17 80    STA $8017,x[$7E:8025]   A:0A48 X:000E Y:0008 ...
</programlisting>
<para>
	上記いずれかのラインで、それぞれ何度か一時停止してからフロアを歩けるようになる。
	あらかじめ用意しておいた「バンクごとのアセンブリコードリスト」で、
	それぞれのラインを含むルーチンの状況を見ることにする。
</para>
<para>
	<varname>$C0B6BD</varname> のほうは長いルーチンなので見たくない。
	というか、<literal>STA</literal> 命令の直前で <literal>LDA #$CC62</literal> していることを確認すれば十分。
	定数を <varname>$8017,Y</varname> にロードしているだけなので、
	ここは今調べたいこととは直接関係がないとみなして飛ばす。
</para>
<para>
	<varname>$C0B909</varname> のほうは、我々の欲しいデータに近いところをアクセスしているように見える
	（コメントは作業用のもの）。
</para>
<programlisting>
// $00 は $C9/2C0E あたりでセット
C0/B903:    DA          PHX 
C0/B904:    5A          PHY 
C0/B905:    BB          TYX                 x = y;
C0/B906:    A8          TAY                 y = a;  // 8 と仮定する
                                            // 台詞アクションと関係あり
C0/B907:    B700        LDA [$00],Y         // FF243C 構造体 [$08]
C0/B909:    9D1780      STA $8017,X         $8017,X = ([$00],Y:=a);
C0/B90C:    C8          INY
C0/B90D:    C8          INY                 y += 2;
C0/B90E:    B700        LDA [$00],Y         // FF243C 構造体 [$0A]
C0/B910:    29FF00      AND #$00FF          // 台詞アクションと関係あり
C0/B913:    9D5780      STA $8057,X         $8057,X = [$00],Y &amp; 00FFh;
C0/B916:    7A          PLY 
C0/B917:    FA          PLX 
C0/B918:    60          RTS                 return;
</programlisting>
<para>
	GSD のステップ実行機能とコードリストを用いて、
	このサブルーチンの呼び出し元を探す。
	それは <varname>$C0B2BA</varname> であることが判明する。
	このルーチンは頻繁に <literal>JSL $C92BD4</literal> を行っている。
	このルーチン呼び出しが実に特徴的である―――。
</para>
</section> <!-- dq6.people.hack.brkpnt -->

<section id="dq6.people.hack.C92BD4">
<title><literal>JSL $C92BD4</literal></title>
<para>
	ルーチン <varname>$C0B2BA</varname> は長いので、アセンブリコードリスト全体の掲載は省略する。
	ポイントは、数回行われる <literal>JSL $C92C39</literal> である。
	<literal>JSL</literal> 先のサブルーチンから <literal>RTL</literal> する際、
	プログラムカウンタ (PC) は通常より <literal>11</literal> バイト先にズレているのである。
</para>
<programlisting>
C0/B317:    22392CC9    JSR $C92C39         ■a = $40 処理の結果
C0/B31B:    00          // ($09,S),1 - ゼロかそうでないかが重要
C0/B31C:    0B00        // ($09,S),2 - $00,X との Multiplier
C0/B31E:    3C24        // ($09,S),4 - *P
C0/B320:    FF          // ($09,S),6 - $42 へ加算
C0/B321:    0000        // ($09,S),7 - *P と加算 -&gt; $40 と加算 (3byte)
C0/B323:    3F          // ($09,S),9 - $40 と AND する
C0/B324:    0000        // ($09,S),A - 上位バイトが非ゼロであれば、シフト操作になる
                        // 
C0/B326:    20D1B8      JSR $B8D1           ■$7E8557,(y=a) = y; if a != 0028h.
C0/B329:    A90500      LDA #$0005          a = 0005h;
C0/B32C:    20EAB8      JSR $B8EA           // [$00],Y 関係; ここの処理が謎
C0/B32F:    A90800      LDA #$0008          a = 0008h;
// !! メッセージアクションアドレスセット !!
C0/B332:    2003B9      JSR $B903           ■$8017,y = [$00],a; $8057,y = [$00],a+2 &amp; 00FFh;
C0/B335:    22392CC9    JSR $C92C39         ■a = $40 処理の結果
C0/B339:    00          // 上と同じように参照される
C0/B33A:    0B00        //
C0/B33C:    3C24FF      //
C0/B33E:    FF          //
C0/B33F:    0000        //
C0/B341:    C0          //
C0/B342:    3F00        //
</programlisting>
<para>
	サブルーチン <varname>$C92C39</varname> は、スタックポインタ (<varname>S</varname>) を巧みに利用して、
	この <literal>11</literal> バイトのデータを参照する。
	そして、このサブルーチンをつぶさに解析すれば、
	この <literal>11</literal> バイトの各値がどのような意味を持ち、
	どのように使われるのかが（おおまかに）わかる。
	それが上のコードのコメントに殴り書きしたものである。
</para>
<para>
	<varname>$FF243C</varname> から <literal>#$000B</literal> バイトの構造体が、連続して配置されていることがわかる。
	あとはバイナリダンプをロムイメージから抽出して、データの意味のアタリをつける。
</para>
</section> <!-- dq6.people.hack.C92BD4 -->

<section id="dq6.people.hack.FF243C">
<title>構造体 <varname>$FF243C</varname></title>
<para>
	アドレス <varname>$FF243C</varname> から <literal>#$0B</literal> バイトの構造体のようなデータが、
	実に <literal>#$74E</literal> 個直列して格納されている。
	この構造体のデータの意味は、以下のようなものである。
</para>
<table id="table.dq6.FF243C" class="memorylayout">
	<caption>構造体 $FF243C メモリレイアウト</caption>
	<colgroup>
		<col span="1" width="12%"/>
		<col span="7" width="11%"/>
	</colgroup>
	<thead>
		<tr><th>Byte:Bit</th>
			<th>80</th>
			<th>40</th>
			<th>20</th>
			<th>10</th>
			<th>08</th>
			<th>04</th>
			<th>02</th>
			<th>01</th>
		</tr>
	</thead>
	<tr><th>00</th>
		<td colspan="2">人グラフィック ID (Lo)</td>
		<td colspan="6">Unknown</td>
	</tr>
	<tr><th>01</th>
		<td colspan="2">向き</td>
		<td colspan="6">人グラフィック ID (Hi)</td>
	</tr>
	<tr><th>02</th><td colspan="8">X 座標 (Lo)</td></tr>
	<tr><th>03</th>
		<td colspan="7">Y 座標 (Lo)</td>
		<td>X 座標 (Hi)</td>
	</tr>
	<tr><th>04</th>
		<td colspan="1">未使用</td>
		<td colspan="1">はなす時に向き固定</td>
		<td colspan="1">十字キーの処理関係か</td>
		<td colspan="3">座標基準値のようなもの</td>
		<td colspan="2">Y 座標 (Hi)</td>
	</tr>
	<tr><th>05</th><td rowspan="3" colspan="8">歩き方処理アドレス</td></tr>
	<tr><th>06</th></tr>
	<tr><th>07</th></tr>
	<tr><th>08</th><td rowspan="3" colspan="8">はなす処理アドレス</td></tr>
	<tr><th>09</th></tr>
	<tr><th>0A</th></tr>
</table>
<para>
	Unknown となっているメンバは、現在調査中である。
</para>
<glosslist>
	<glossentry>
		<glossterm>人グラフィック ID</glossterm>
		<glossdef>
			<para>
				フロアに入った瞬間におけるその人物のグラフィック種別を示す値である。
				例えば、<literal>#$00</literal> は主人公のそれであり、<literal>#$01</literal> はハッサンのそれであり、
				商人・神父・おばさん・バニー・ネコ等のグラフィックなどを特定できる値である。
				この ID とグラフィックの対応表は、
				ドラクエビューア <xref linkend="dqref.url2"/>
				で知ることができる。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>向き</glossterm>
		<glossdef>
			<para>
				フロアに入った瞬間にその人物がどの方向を向いているかを示すものである。
			</para>
			<table id="table.dq6.FF243C.direction" class="lighttable">
				<caption>向き</caption>
				<thead>
					<tr><th>値</th><th>向き</th></tr>
				</thead>
				<tbody>
					<tr><td><literal>0</literal></td><td>上</td></tr>
					<tr><td><literal>1</literal></td><td>右</td></tr>
					<tr><td><literal>2</literal></td><td>下</td></tr>
					<tr><td><literal>3</literal></td><td>左</td></tr>
				</tbody>
			</table>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>X 座標</glossterm>
		<glossdef>
			<para>
				フロアに入った瞬間におけるその人物の位置の X 座標である。
				ただし、メンバ「座標基準値のようなもの」からのオフセット値である可能性がある。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>Y 座標</glossterm>
		<glossdef>
			<para>
				フロアに入った瞬間におけるその人物の位置の Y 座標である。
				ただし、メンバ「座標基準値のようなもの」からのオフセット値である可能性がある。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>標基準値のようなもの</glossterm>
		<glossdef>
			<para>
				「X 座標」「Y 座標」に影響する値のようだが、詳しくは不明。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>十字キーの処理関係か</glossterm>
		<glossdef>
			<para>
				十字キーを押したときに、その人物がどう移動するかを示す値かもしれない。
				詳細は不明。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>はなす時に向き固定</glossterm>
		<glossdef>
			<para>
				その人物にはなすコマンドを使用したときに、
				その人物がこちらを振り向くかどうかを意味する値かもしれない。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>歩き方処理アドレス</glossterm>
		<glossdef>
			<para>
				その人物がどのように歩き回るかを実装したサブルーチンのアドレスである。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>はなす処理アドレス</glossterm>
		<glossdef>
			<para>
				その人物にはなすコマンドを使用したときに、
				どのような処理をするのかを実装したサブルーチンのアドレスである。
			</para>
		</glossdef>
	</glossentry>
</glosslist>
</section> <!-- dq6.people.hack.FF243C -->
</section> <!-- dq6.people.hack -->

<section id="dq6.people.todo">
<title>TODO リスト</title>
<itemizedlist>
	<listitem>
		<para>
			構造体 <varname>$FF243C</varname> の各メンバの正確な意味を把握する
		</para>
	</listitem>
</itemizedlist>
</section> <!-- dq6.people.todo -->
</section> <!-- dq6.people -->
