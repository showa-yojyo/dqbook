<?xml version="1.0" encoding="UTF-8"?>

<section id="dq6.encounter"><?dbhtml filename="dq6_encounter.html" ?>
<title>タイルエンカウント</title>
<indexterm id="term.dq6.encounter"><primary>タイルエンカウント</primary><secondary>DQ6</secondary></indexterm>
<indexterm id="term.dq6.tile"><primary>タイル戦闘</primary><secondary>DQ6</secondary></indexterm>
<para>
	ここでは、<varname>$C6843C</varname> に定義されている構造体、
	タイルエンカウント構造体の完全解析を試みる
	（敵側グループの決定アルゴリズムの説明はここでは行わない）。
	「タイルエンカウント」という用語は、
	&dq7_2000; のデバッグモードの同名デバッグメニューから拝借した。
	これは、フィールドやダンジョンにおける戦闘モード開始時における
	敵側グループの構成を決めるためのデータである。
</para>
<para>
	タイルエンカウント構造体のアドレスを特定する方法は調査しない。
	既に Shingo Endo 氏解析資料 <xref linkend="dqref.url1"/>
	等によって解析済である。
	後発の解析であるため、それを再利用させてもらう。
</para>

<section id="dq6.encounter.hack">
<title>解析</title>
<para>
	これまで見てきた各種構造体 
	（<link linkend="dq6.monster">モンスター</link>、
	<link linkend="dq6.character">仲間キャラクター</link>、
	<link linkend="dq6.item">アイテム</link>、
	<link linkend="dq6.act">行動</link>構造体等）
	と同じく、データ構造体配列と、そのデータへのポインタ配列の二本立てである。
</para>
<para>
	プログラムからデータを参照する手段は、サブルーチン
	<varname>$C92C2D</varname> および
	<varname>$C92C39</varname>
	のみを利用するようだ。
</para>

<section id="dq6.encounter.hack.C68E4A">
<title><varname>$C68E4A</varname> - タイルエンカウント構造体へのポインタ配列</title>
<para>
	格納されている値は、タイルエンカウント ID に対応するデータが格納されているアドレスである。
	ただし、この値に <literal>#$C60000</literal> を加算したものが絶対アドレスとなる。
</para>
<programlisting>
C6/8E4A:    C6    // DB
C6/8E4B:    3C84  // 00: タイルエンカウント[00] は $C6843C に格納（以下同様）
C6/8E4D:    5284  // 01
C6/8E4F:    6884  // 02
...
C6/8F33:    348E  // 74
</programlisting>
</section> <!-- dq6.encounter.hack.C68E4A -->

<section id="dq6.encounter.hack.C92C2D">
<title><code>JSL $C92C2D</code> によるデータ取得</title>
<para>
	サブルーチン <varname>$C92C2D</varname> は、汎用的なデータ取得ルーチンを実装するものである。
	具体的に言うと、
	「ある構造体データの ID = <varname>Y</varname> の、あるメンバー」を取得するルーチンである。
</para>
<para>
	このサブルーチンを呼び出す際には、以下のものを「実引数」として引き渡す：
</para>
<itemizedlist>
	<listitem>
		<para>
			(1 byte) 取得する値をどこにしまうか
		</para>
	</listitem>
	<listitem>
		<para>
			(2 byte) 対象となる構造体のサイズ
		</para>
	</listitem>
	<listitem>
		<para>
			(3 byte) 構造体データのアドレス配列の絶対アドレス
		</para>
	</listitem>
	<listitem>
		<para>
			(2 byte) 欲しいデータのある箇所が、何バイト目からあるのか
		</para>
	</listitem>
	<listitem>
		<para>
			(3 byte) ビットマスク
		</para>
	</listitem>
</itemizedlist>
<para>
	プログラムがタイルエンカウンド構造体データ ID = <varname>Y</varname> の、
	モンスターID <literal>[00]</literal> というメンバー（後述）の値を取得するために、
	以下のようにして <varname>$C92C2D</varname> を呼び出す。
</para>
<programlisting>
C3/C2A4:    222D2CC9    JSR $C92C2D         ■(RTL+B) a = [arg[03-05]]arg[06-07],@y &amp; arg[08-0A]
            01
            1600    // タイルエンカウント構造体データのサイズ
            4A8EC6  // タイルエンカウント構造体データへのポインタ配列先頭アドレス
            0300    // 3 バイト目から
            E01F00  // &amp; 001FE0h した値
C3/C2B3:    60          RTS
</programlisting>
</section> <!-- dq6.encounter.hack.C92C2D -->

<section id="dq6.encounter.hack.C92C39">
<title><code>JSL $C92C39</code> によるデータ取得</title>
<para>
	<literal>JSL $C92C2D</literal> の <literal>X</literal> バージョンである。すなわち、
	ある構造体データの ID = <literal>X</literal> の、あるメンバー」を取得するルーチンである。
</para>
</section> <!-- dq6.encounter.hack.C92C39 -->

<section id="dq6.encounter.hack.C6843C">
<title><varname>$C6843C</varname> - タイルエンカウント構造体</title>
<para>
	構造体一個あたりのデータ格納レイアウトを以下に示す
	（記号「←」は、ビット列が次のバイトの下位ビット列と一体化して、
	一つのメンバーを構成することを示す）。
</para>
<table id="table.dq6.C6843C" class="memorylayout">
	<caption>$C6843C タイルエンカウント構造体 メモリレイアウト</caption>
	<colgroup>
		<col span="1" width="12%"/>
		<col span="7" width="11%"/>
	</colgroup>
	<thead>
		<tr><th>Byte:Bit</th>
			<th>80</th>
			<th>40</th>
			<th>20</th>
			<th>10</th>
			<th>08</th>
			<th>04</th>
			<th>02</th>
			<th>01</th>
		</tr>
	</thead>
	<tbody>
		<tr><th>00</th>
			<td colspan="8">レベル</td>
		</tr>
		<tr><th>01</th>
			<td colspan="2">←</td>
			<td colspan="1">For <varname>$7E2011</varname></td>
			<td colspan="3">ID for <varname>$C3015C</varname></td>
			<td colspan="2">先制攻撃率定義構造体 ID</td>
		</tr>
		<tr><th>02</th>
			<td colspan="1">←</td>
			<td colspan="3">For <varname>$7E3022</varname></td>
			<td colspan="3">For <varname>$7E3020</varname></td>
			<td colspan="1">For <varname>$7E301E</varname></td>
		</tr>
		<tr><th>03</th>
			<td colspan="3">←</td>
			<td colspan="3"><literal>JMP ($F5CE,X)</literal><literal>[00]</literal></td>
			<td colspan="2">For <varname>$7E301E</varname></td>
		</tr>
		<tr><th>04</th>
			<td colspan="3">For <varname>$7E3020</varname></td>
			<td colspan="5">モンスター ID<literal>[00]</literal></td>
		</tr>
		<tr><th>05</th>
			<td colspan="5">←</td>
			<td colspan="3"><literal>JMP ($F5CE,X)</literal><literal>[01]</literal></td>
		</tr>
		<tr><th>06</th>
			<td colspan="2">←</td>
			<td colspan="3">For <varname>$7E3022</varname></td>
			<td colspan="3">モンスター ID<literal>[01]</literal></td>
		</tr>
		<tr><th>07</th>
			<td colspan="7">←</td>
			<td colspan="1"><literal>JMP ($F5CE,X)</literal><literal>[02]</literal></td>
		</tr>
		<tr><th>08</th>
			<td colspan="1">←</td>
			<td colspan="3"><literal>JMP ($F5CE,X)</literal><literal>[03]</literal></td>
			<td colspan="3">For <varname>$7E3024</varname></td>
			<td colspan="1">モンスター ID<literal>[02]</literal></td>
		</tr>
		<tr><th>09</th>
			<td colspan="1">←</td>
			<td colspan="7">モンスター ID<literal>[03]</literal></td>
		</tr>
		<tr><th>0A</th>
			<td colspan="3">←</td>
			<td colspan="3"><literal>JMP ($F5CE,X)</literal><literal>[04]</literal></td>
			<td colspan="2">For <varname>$7E3026</varname></td>
		</tr>
		<tr><th>0B</th>
			<td colspan="3">For <varname>$7E3028</varname></td>
			<td colspan="5">モンスター ID<literal>[04]</literal></td>
		</tr>
		<tr><th>0C</th>
			<td colspan="5">←</td>
			<td colspan="3">JMP ($F862,X) テーブル ID</td>
		</tr>
		<tr><th>0D</th>
			<td colspan="2">←</td>
			<td colspan="3">For <varname>$7E302A</varname></td>
			<td colspan="3">モンスター ID<literal>[05]</literal></td>
		</tr>
		<tr><th>0E</th>
			<td colspan="7">←</td>
			<td colspan="1">JMP ($F862,X) テーブル ID</td>
		</tr>
		<tr><th>0F</th>
			<td colspan="1">←</td>
			<td colspan="3">JMP ($F862,X) テーブル ID</td>
			<td colspan="3">For <varname>$7E302C</varname></td>
			<td colspan="1">モンスター ID<literal>[06]</literal></td>
		</tr>
		<tr><th>10</th>
			<td colspan="1">←</td>
			<td colspan="7">モンスター ID<literal>[07]</literal></td>
		</tr>
		<tr><th>11</th>
			<td colspan="3">←</td>
			<td colspan="3">JMP ($F862,X) テーブル ID</td>
			<td colspan="2">For <varname>$7E302E</varname></td>
		</tr>
		<tr><th>12</th>
			<td colspan="3">For <varname>$7E3030</varname></td>
			<td colspan="6">モンスター ID<literal>[08]</literal></td>
		</tr>
		<tr><th>13</th>
			<td colspan="5">←</td>
			<td colspan="3">JMP ($F862,X) テーブル ID</td>
		</tr>
		<tr><th>14</th>
			<td colspan="2">←</td>
			<td colspan="3">For <varname>$7E3032</varname></td>
			<td colspan="3">モンスター ID<literal>[09]</literal></td>
		</tr>
		<tr><th>15</th>
			<td colspan="2">未使用</td>
			<td colspan="6">モンスター ID<literal>[0A]</literal></td>
		</tr>
	</tbody>
</table>
<para>
	以下、各メンバーの説明をする。
</para>
<glosslist>
	<glossentry>
		<glossterm>レベル</glossterm>
		<glossdef>
			<para>
				トヘロス・せいすい・しのびあし状態における移動中、
				戦闘突入チェックを回避するか否かを決める値である。
				主人公のレベルが、この値 <literal>+5</literal> 以上であれば、戦闘には突入しない。
			</para>
			<para>
				この <literal>1</literal> バイトの値は戦闘時に <varname>$7E2010</varname> にセットされる。
				「にげる」の成否は、このセットした値と主人公のレベルに対して
				同じ <literal>+5</literal> による大小判定チェックを行う。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>先制攻撃率定義構造体 ID</glossterm>
		<glossdef>
			<para>
				先制攻撃率定義構造体配列 <varname>$C3F9AE</varname> のインデックスを格納している。
			</para>
<programlisting>
// [00-01]: 整数区間の下限。
// [02-03]: 整数区間の上限を下限 + d で表すときの d の値。
C3/F9AE:     08000800
C3/F9B2:     08000000
C3/F9B6:     20000800
C3/F9BA:     20002000
</programlisting>
<para>
この値からサブルーチン <varname>$C2326F</varname> 呼び出しにより乱数を生成し、<literal>$7E2011 &amp; 03h</literal> をセットする。
すなわち、戦闘突入時点における味方側・敵側の先制攻撃の発生有無を決める値である。
</para>
<para>
ちなみに、戦闘開始直後の先制攻撃決定アルゴリズムのいい加減な説明は次のようになる。
まず、エンカウント ID に対応する先制攻撃率定義構造体が決まる。

このとき、先制攻撃テストに利用するふたつの閾値 <varname>L</varname>, <varname>U</varname> が決まる。

例えば <varname>$C3F9B6</varname> が適用されるケースでは、
閾値はそれぞれ <code>L := 0x0020</code>
および <code>U := L + d == 0x0020 + 0x0008</code> となる。

<orderedlist>
<listitem>
<para>サブルーチン <varname>$C00E97</varname> による乱数 <varname>R</varname> を取得する。</para>
</listitem>

<listitem>
<para><code>R &lt; L</code> ならば、こちら側の先制攻撃となる。</para>
</listitem>

<listitem>
<para>そうではなく、<code>R &lt; U</code> ならば、敵側の先制攻撃となる。</para>
</listitem>

<listitem>
<para>そのいずれでもなければ、先制攻撃は敵・味方のどちら側にも発生しない。</para>
</listitem>
</orderedlist>
</para>

<para>
もう一つ注意したい点がある。
実は「しのびあし」状態にあるとき、<literal>d</literal> の値を <literal>1/4</literal> にする処理が追加される。
敵側の先制攻撃確率がかなり減ることになる。
</para>

		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>ID for <varname>$C3015C</varname></glossterm>
		<glossdef>
			<para>
				戦闘突入か否かを決めるデータ配列のインデックスである。
				パーティが一歩歩くたびに、 <varname>$7E3B8F</varname> が減る方向に更新される。
				これが <literal>0</literal> を切ると、戦闘が発生する。
				この一歩において、どれだけこのカウンターを減らすかを決める値を決めるデータ配列のインデックスである。
			</para>
			<para>
				<varname>$C3015C</varname> は <literal>2</literal> バイト値 <literal>2</literal> 個からなる型の配列である。
				前の <literal>2</literal> バイト値は乗算に用い、後ろの <literal>2</literal> バイト値は除算に用いる。
				カウンター <varname>$7E3B8F</varname> を、（おそらく）乱数由来の <varname>$70</varname> に乗算・除算をしたもので減じていく。
				ちなみに、しのびあし状態のときは、乗算・除算後の値を <literal>4</literal> で割ったもので減じる。
			</para>
<programlisting>
C3/015C:    01000200   // $7E3B8F -= ($70 * 1 / 2)
C3/0160:    02000300   // $7E3B8F -= ($70 * 2 / 3)
C3/0164:    03000400   // $7E3B8F -= ($70 * 3 / 4)
C3/0168:    01000100   // $7E3B8F -= ($70 * 1 / 1)
C3/016C:    05000400   // $7E3B8F -= ($70 * 5 / 4)
C3/0170:    03000200   // $7E3B8F -= ($70 * 3 / 2)
C3/0174:    07000400   // $7E3B8F -= ($70 * 7 / 4)
C3/0178:    02000100   // $7E3B8F -= ($70 * 2 / 1)
</programlisting>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>For <varname>$7E2011</varname></glossterm>
		<glossdef>
			<para>
				戦闘突入時に、以下の各ビットにセットする値である：
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<literal>$7E2011 &amp; 20h</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>$7E2011 &amp; 04h</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>$7E2011 &amp; 08h</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>$7E2011 &amp; 10h</literal>
					</para>
				</listitem>
			</itemizedlist>
			<para>
				メンバー名が適切ではないのだが、
				このバイトの中身が解析できていない現時点では他に呼びようがない。
				情報求む。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>For <varname>$7E301E</varname>-<varname>$7E3032</varname></glossterm>
		<glossdef>
			<para>
				このデータが定義するモンスターのうち、どれが出現し易いかを表現する数値である。
				具体的な説明は次の機会にする。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm><literal>JMP ($F5CE,X)</literal></glossterm>
		<glossdef>
			<para>
				モンスターグループの匹数を決定するルーチン
				（ジャンプテーブルが <varname>$C3F5CE</varname> にある）で参照されるメンバーである。
				この値をもとに乱数を生成して、それが <varname>$7E2008,Y</varname> すなわち、
				当該グループの匹数となる。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>JMP ($F862,X) テーブル ID</glossterm>
		<glossdef>
			<para>
				モンスターグループの匹数を決定するルーチン
				（ジャンプテーブルが <varname>$C3F862</varname> にある）のジャンプテーブルのインデックスである。
				ジャンプテーブルは以下の通りである。
				各ルーチンの実装で、コメントのようにアキュームレータに値をセットする。
				値が複数書いてあるものは、乱数生成を行うことを意味する。
			</para>
<programlisting>
C3/F862:    72F8 // a = 1
C3/F864:    76F8 // a = 2
C3/F866:    7AF8 // a = 3
C3/F868:    7EF8 // a = 1, 2
C3/F86A:    87F8 // a = 2, 3
C3/F86C:    93F8 // a = 3, 4
C3/F86E:    9FF8 // a = 4, 5, 6, 7
C3/F870:    ABF8 // a = 8
</programlisting>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>モンスター ID <literal>[00-0A]</literal></glossterm>
		<glossdef>
			<para>
				その戦闘に最初に登場している可能性のあるモンスターの<link linkend="dq6.monster">モンスター ID</link>
				である。
				<literal>[0A]</literal> のモンスターは特殊な条件が成り立っていないと、
				登場し得ない。
			</para>
		</glossdef>
	</glossentry>
	<glossentry>
		<glossterm>未使用</glossterm>
		<glossdef>
			<para>
				すべてのタイルエンカウントデータに対して、ゼロで埋められている。
			</para>
		</glossdef>
	</glossentry>
</glosslist>
</section> <!-- dq6.encounter.hack.C6843C -->
</section> <!-- dq6.encounter.hack -->

<section id="dq6.encounter.todo">
<title>TODO リスト</title>
<itemizedlist>
	<listitem>
		<para>
			モンスターグループのセットルーチンを説明
		</para>
	</listitem>
</itemizedlist>
</section> <!-- dq6.encounter.todo -->
</section> <!-- dq6.encounter -->
