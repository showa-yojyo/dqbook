<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % replacement SYSTEM "replacement.xml">
  %replacement;
]>

<section id="dq6.string"><?dbhtml filename="dq6_string.html" ?>
<title>文字列</title>
<indexterm id="term.dq6.string"><primary>文字列</primary><secondary>DQ6</secondary></indexterm>
<para>
本節では文字列処理について述べる。
まず、いくつかの基本的な概念を簡単に説明する。
次に、プログラムがどのように文字列データにアクセスするかを簡単に述べる。
最後に、全文字列データを独自コードから UTF-8 に変換したテキストデータを作成する。
</para>
<para>
なお、本節で言う文字列とは &dq5_1992; でのそれと同じ定義とする。
<xref linkend="dq5.string"/> の冒頭部を参照して欲しい。
</para>

<section id="dq6.string.overview">
<title>概要</title>
<para>
文字列の扱いにおける要所を以下に列挙していく。
</para>

<variablelist>
  <varlistentry>
    <term>文字コード</term>
    <listitem>
    <para>
      前作同様、文字列を構成する文字コードは、単に 1 バイトの数値として表現されている。
      この文字コードの配列を文字列と呼んでいるのだった。
    </para>
    <para>
      既に先人 <xref linkend="dqref.url1"/>, <xref linkend="dqref.url2"/>
      の手によってデータ格納位置および文字コードが判明している。
    </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>文字列のデータ構造</term>
    <listitem>
      <para>
        文字列は前作では Pascal 風の構造を有していたが、今作では C 言語風に改められている。
        すなわち、表現する文字列に対応する文字コード列に続き、
        終端を意味させるために空文字 <literal>#$AC</literal> が末尾にあるものとする。
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>半濁点・濁点処理</term>
    <listitem>
      <para>
        半濁点・濁点処理についてはサブルーチン <varname>$C03221</varname> のコードが参考になる。
        文字コードが <literal>#$C9</literal> 以上の文字については、次に述べる事情を考慮するようだ。
      </para>
      <para>
        「パ」とか「バ」のような文字はデータとしては 1 コードで表現されているものの、
        表示の都合上、これらを 2 コードに分けたデータとして管理することもある。
        そのために参照する「半濁点・濁点付き仮名文字から半濁点・濁点を抜いた文字に変換する表」や、
        半濁点・濁点だけを表す文字コードが定義されている。
      </para>
      <para>
        「半濁点・濁点付き仮名文字から半濁点・濁点を抜いた文字に変換する表」は
        アドレス <varname>$C029A4</varname> と <varname>$C0297B</varname> にそれぞれ定義されている。
        これを参照して、例えば「ガ」を「カ」「゛」と分解できる。
        半濁点・濁点分解処理では、前作とは対照的に、半濁点・濁点コードのほうを上位バイトに配置する規則がある。
      </para>
      <para>
        半濁点・濁点だけを表す文字コードはそれぞれ <literal>#$84</literal>, <literal>#$83</literal> となっている。
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>文字列データの格納アドレス配列</term>
    <listitem>
      <para>
        文字列データはアドレス <varname>$FB8703</varname> から延々と配列されている。
        前作では文字列の意味によって論理的にグループ分けされていて、ID の意味が弱かったのだが、
        本作では ID を与えるだけで文字列データの特定ができる。
      </para>
      <para>
        先に述べたように、文字列の末端に <literal>#$AC</literal> があるという性質を用いれば、
        この先頭アドレスから ID 個の <literal>#$AC</literal> を検索していって、
        到達したアドレスが与える ID で示される文字列データの格納位置となる。
        ただし、このようなアルゴリズムでは定数時間アクセスどころか、
        明らかに ID の大きい文字列データほどアクセスに時間を要するようになってしまう。
        そこで、実際のプログラムでは 16 の倍数ごとの ID の文字列データの格納アドレスを
        あらかじめ配列 <varname>$C165E7</varname> にキャッシュしておくことで頑張っている。
        これについて詳細を知りたければ、サブルーチン <varname>$C0315E</varname> を確認して欲しい。
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>文字列 ID</term>
    <listitem>
      <para>
        文字列 ID としての有効な値の範囲は、定数データの参照という意味では
        <literal>#$09A7</literal> 未満である必要がある。
        それ以上の値は、仲間キャラクターの名前等を参照するために用いられている。
        その場合には、ID は <literal>#$09CA</literal> 未満である必要がある。
        このことについても、サブルーチン <varname>$C0315E</varname> 以下から確認できる。
      </para>
    </listitem>
  </varlistentry>
</variablelist>
<para>
ここまで出てきた重要（および関連する）機能のアドレスを表にまとめておく。
後でウィンドウ解析を議論する際に参照して欲しい：
</para>
<table id="table.dq6.string.model" class="lighttable">
  <caption>文字列機能</caption>
  <thead>
    <tr><th>アドレス</th><th>分類</th><th>意味</th></tr>
  </thead>
  <tbody>
    <tr><td><varname>$C0297B</varname></td><td>データ</td><td>濁点文字コードから濁点を抜いた文字コードへの対応を与える配列</td></tr>
    <tr><td><varname>$C029A4</varname></td><td>データ</td><td>半濁点文字コードから半濁点を抜いた文字コードへの対応を与える配列</td></tr>
    <tr><td><varname>$C029AE</varname></td><td>データ</td><td>ある文字コードから「～」や「＋」へ変換するための配列</td></tr>
    <tr><td><varname>$C0315E</varname></td><td>サブルーチン</td><td>文字列 ID を入力して、データ格納アドレスを <varname>$00:$03,X</varname> に出力する</td></tr>
    <tr><td><varname>$C03221</varname></td><td>サブルーチン</td><td>必要に応じて文字コードを変換する</td></tr>
    <tr><td><varname>$C165E7</varname></td><td>データ</td><td>文字列データ格納アドレス計算配列</td></tr>
    <tr><td><varname>$FB8703</varname></td><td>データ</td><td>文字列データ配列</td></tr>
  </tbody>
</table>
</section> <!-- dq6.string.overview -->

<section id="dq6.string.data">
<title>データ</title>
<para>
<xref linkend="appendix.b"/> にアドレス <varname>$FB8703</varname> 以降に表現されている全文字列データを UTF-8 に変換したテキストデータを置く。
前述のとおり、意味のあるダンプは ID が <literal>#$09A7</literal> 未満のものに限る。
</para>
</section> <!-- dq6.string.data -->
</section> <!-- dq6.string -->
